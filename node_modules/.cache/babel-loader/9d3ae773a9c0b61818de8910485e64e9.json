{"ast":null,"code":"var _jsxFileName = \"/home/naman/geo/src/Components/filesView/FileItem.js\";\nimport React from 'react';\nimport '../../styles/FileItem.css';\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nconst FileItem = _ref => {\n  let {\n    id,\n    caption,\n    timestamp,\n    fileUrl,\n    size\n  } = _ref;\n  // const fileDate = `${timestamp?.toDate().getDate()} ${monthNames[timestamp?.toDate().getMonth() + 1]} ${timestamp?.toDate().getFullYear()}`\n  // const getReadableFileSizeString = (fileSizeInBytes) => {\n  //     let i = -1;\n  //     const byteUnits = [' kB', ' MB', ' GB', ' TB', 'PB', 'EB', 'ZB', 'YB'];\n  //     do {\n  //         fileSizeInBytes = fileSizeInBytes / 1024;\n  //         i++;\n  //     } while (fileSizeInBytes > 1024);\n  //     return Math.max(fileSizeInBytes, 0.1).toFixed(1) + byteUnits[i];\n  // };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fileItem\",\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      href: fileUrl,\n      target: \"_blank\",\n      download: true,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fileItem--left\",\n        children: [/*#__PURE__*/_jsxDEV(InsertDriveFileIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: caption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fileItem--right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_c = FileItem;\nexport default FileItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileItem\");","map":{"version":3,"sources":["/home/naman/geo/src/Components/filesView/FileItem.js"],"names":["React","InsertDriveFileIcon","monthNames","FileItem","id","caption","timestamp","fileUrl","size"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,2BAAP;AAEA,OAAOC,mBAAP,MAAgC,oCAAhC;;AAEA,MAAMC,UAAU,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAAnB;;AAEA,MAAMC,QAAQ,GAAG,QAA+C;AAAA,MAA9C;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,OAAN;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA,OAA1B;AAAmCC,IAAAA;AAAnC,GAA8C;AAC5D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,2BACI;AAAG,MAAA,IAAI,EAAED,OAAT;AAAkB,MAAA,MAAM,EAAC,QAAzB;AAAkC,MAAA,QAAQ,MAA1C;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACI,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAIF;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CA5BD;;KAAMF,Q;AA8BN,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport '../../styles/FileItem.css'\n\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\n\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nconst FileItem = ({ id, caption, timestamp, fileUrl, size }) => {\n    // const fileDate = `${timestamp?.toDate().getDate()} ${monthNames[timestamp?.toDate().getMonth() + 1]} ${timestamp?.toDate().getFullYear()}`\n\n    // const getReadableFileSizeString = (fileSizeInBytes) => {\n    //     let i = -1;\n    //     const byteUnits = [' kB', ' MB', ' GB', ' TB', 'PB', 'EB', 'ZB', 'YB'];\n    //     do {\n    //         fileSizeInBytes = fileSizeInBytes / 1024;\n    //         i++;\n    //     } while (fileSizeInBytes > 1024);\n\n    //     return Math.max(fileSizeInBytes, 0.1).toFixed(1) + byteUnits[i];\n    // };\n\n    return (\n        <div className='fileItem'>\n            <a href={fileUrl} target=\"_blank\" download>\n                <div className=\"fileItem--left\">\n                    <InsertDriveFileIcon />\n                    <p>{caption}</p>\n                </div>\n                <div className=\"fileItem--right\">\n                    {/* <p>{fileDate}</p>\n                    <p>{getReadableFileSizeString(size)}</p> */}\n                </div>\n            </a>\n        </div>\n    )\n}\n\nexport default FileItem"]},"metadata":{},"sourceType":"module"}